[{"title":"React-Navigation","date":"2019-04-04T06:30:56.000Z","path":"2019/04/04/React-Navigation/","text":"React-Navigation对于多页面应用，RN官方推荐使用react-navigation管理页面导航。具体可看官方网站。一个简单的结合使用Drawer和Stack的示例代码： import React from &quot;react&quot;; import { Root } from &quot;native-base&quot;; import { createDrawerNavigator, createStackNavigator, createAppContainer } from &quot;react-navigation&quot;; import Index from &quot;./screens/index/&quot;; import Login from &quot;./screens/login/&quot;; import Monitor from &quot;./screens/monitor/&quot;; import Gather from &quot;./screens/gather/&quot;; import Slyxdcb from &quot;./screens/slyxdcb/&quot;; import SideBar from &quot;./screens/sidebar&quot;; import Sllbsldcb from &quot;./screens/sllbsldcb&quot;; import Gdydfnldcjlb from &quot;./screens/gdydfnldcjlb&quot;; import Lqpxlyxfdcb from &quot;./screens/lqpxlyxfdcb&quot;; import Zwqlywdcjlb from &quot;./screens/zwqlywdcjlb&quot;; import Hdmfyxfdcb from &quot;./screens/hdmfyxfdcb&quot;; import Datamanage from &quot;./screens/datamanage&quot;; import Xjwdxxb from &quot;./screens/xjwdxxb&quot;; import Trace from &quot;./screens/trace&quot;; import Tracemanage from &quot;./screens/tracemanage&quot;; import Offlinemap from &quot;./screens/offlinemap&quot;; import User from &quot;./screens/user&quot;; import Dataview from &quot;./screens/dataview&quot;; const Drawer = createDrawerNavigator( {//定义一个Drawer，将所有需要显示在sidebar上进行直接导航的页面加入 Index: { screen: Index }, Login: { screen: Login }, Monitor: { screen: Monitor }, Gather: { screen: Gather }, Slyxdcb: { screen: Slyxdcb }, Sllbsldcb: { screen: Sllbsldcb }, Gdydfnldcjlb : { screen: Gdydfnldcjlb}, Lqpxlyxfdcb : { screen: Lqpxlyxfdcb }, Zwqlywdcjlb : { screen: Zwqlywdcjlb}, Hdmfyxfdcb : { screen: Hdmfyxfdcb }, Datamanage : { screen: Datamanage }, Xjwdxxb : { screen: Xjwdxxb }, Tracemanage: { screen: Tracemanage}, Trace : { screen: Trace }, Offlinemap : { screen: Offlinemap }, User : { screen: User }, }, { initialRouteName: &quot;Index&quot;,//Drawer的初始页面 contentOptions: { activeTintColor: &quot;#e91e63&quot; }, contentComponent: props =&gt; &lt;SideBar {...props} /&gt;//侧边导航组件引用 } ); const AppNavigator = createStackNavigator(//定义一个Stack导航器，将Drawer和其他不需要在sidebar中直接进入的页面加入，此类页面均为从Drawer中页面链接进入 { Drawer: { screen: Drawer }, Dataview : { screen: Dataview } }, { initialRouteName: &quot;Drawer&quot;,//设置Stack的初始组件 headerMode: &quot;none&quot; } ); const AppContainer = createAppContainer(AppNavigator); export default () =&gt; &lt;Root&gt; &lt;AppContainer /&gt; &lt;/Root&gt;; 页面间跳转： this.props.navigation.navigate(“RouteName”)","tags":[{"name":"React Native","slug":"React-Native","permalink":"https://ahbbcc.github.io/tags/React-Native/"}]},{"title":"React Native 引用其他包","date":"2019-04-04T05:25:08.000Z","path":"2019/04/04/React-Native-引用其他包/","text":"React Native 引用其他包使用命令： yarn add包名 对于使用到移动端模块的包，还需要进行自动或者手工的link操作，具体的手工link在相应包的GitHub页面有详细步骤；绝大多数包都可以通过自动link命令完成： react-native link包名 但存在两类问题： 1 共同问题，自动link写入android/settings.gradle的链接路径是符合linux系列的路径写法，在windows下开发需手工将所有“\\”改为“/”； 2 个别问题，有些包的自动link完成的不完全，还需手工在android及ios的原生代码部分添加引用和方法调用代码，如后面提到的React-Navigation的手势支持坑。 完成以上后的第一次运行前会编译相关包，时间可能较长。 在具体需要引用包的组件代码中使用import…from…引入即可。","tags":[{"name":"React Native","slug":"React-Native","permalink":"https://ahbbcc.github.io/tags/React-Native/"}]},{"title":"使用Hexo快速构建Blog","date":"2019-04-04T02:23:32.000Z","path":"2019/04/04/使用Hexo快速构建Blog/","text":"使用Hexo快速构建Blog什么是HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装依赖Node.jsGit 确认电脑中已经安装上述必备程序，然后： npm install -g hexo-cli 建站安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 hexo init &lt;folder&gt; cd &lt;folder&gt; npm install 新建完成后，指定文件夹的目录如下： . ├── _config.yml ├── package.json ├── scaffolds ├── source | ├── _drafts | └── _posts └── themes _config.yml 网站的配置信息，可以在此配置大部分的参数。 基本配置在_config.yml 中配置项分为以下几组： # site 参数 描述 title 网站标题 subtitle 网站副标题 description 网站描述 author 您的名字 language 网站使用的语言，建议设置为 zh-CN timezone 网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 # URL 参数 描述 默认值 url 网址 - root 网站根目录 - permalink 文章的 永久链接 格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 - # Directory 此部分暂时可以不用修改初始配置 # Writing 此部分暂时可以不用修改初始配置 # Category &amp; Tag 参数 描述 默认值 default_category 默认分类 uncategorized category_map 分类别名 - tag_map 标签别名 - # Date / Time format 此部分暂时可以不用修改初始配置 # Pagination 此部分暂时可以不用修改初始配置 # Extensions 后续需要修改此部分的配置 安装配置主题模板找到一个功能完备的主题模板：BlueLake 需要特别注意的是Hexo有两个_config.yml配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为根_config.yml；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题提供，主要用于配置主题相关的选项,下文中会称为主题_config.yml。 安装在根目录下执行： git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake 安装依赖包： npm install hexo-renderer-jade@0.3.0 --save npm install hexo-renderer-stylus --save 启用主题修改 根_config.yml 配置文件，找到theme字段，将其值改为 BlueLake 配置主题1 配置网站头部显示文字打开 根_config.yml ，找到 # site 部分进行配置： title和subtitle分别是网站主标题和副标题，会显示在网站头部；description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO；author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。 2 设置语言主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；在 根_config.yml 配置language项 3 设置菜单打开 主题_config.yml ，找到 # Header ： 主题默认是展示四个菜单，即主页home，归档archive，关于about，订阅RSS；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。 每个页面底部的footer中联系博主的三个图标分别是邮箱，微博主页链接地址，GitHUb个人页链接地址，直接使用主题_config.yml中about页面的配置，若不需要about页面，只需要如下配置就好： about: email: ## 个人邮箱 weibo_url: ## 微博主页链接地址 github_url: ## github主页链接地址 4 添加本地搜索默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件： npm install hexo-generator-json-content@2.2.0 --save 然后在 根_config.yml 添加配置： jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: true 最后在 主题_config.yml 添加配置： local_search: true Hexo主要命令new 新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。 hexo new [layout] &lt;title&gt; generate 生成静态文件。 hexo g server 在本机启动服务预览 hexo s 写blog使用 new 命令新建一篇： hexo new [layout] &lt;title&gt; 会自动在 /source/_post/ 目录下生成 title.md，其文件头部内容类似如下： --- title: React Native 初入门 date: 2019-04-04 08:52:22 --- 可添加categories和tags属性，如： --- title: React Native 初入门 date: 2019-04-04 08:52:22 categories: - React Native tags: - React Native - JS --- 使用在线Markdown编辑器编写正文，完成编写后整体贴入文件的头部下方，保存、生成静态文件、预览即可。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ahbbcc.github.io/tags/Hexo/"}]},{"title":"React Native 初入门","date":"2019-04-04T00:52:22.000Z","path":"2019/04/04/React-Native-初入门/","text":"React Native 初入门环境搭建1 依赖安装 此处以Windows下搭建环境为例 必须安装的依赖有：Node、React Native 命令行工具、Python2 以及 JDK 和 Android Studio。 Node，Python2，JDK直接通过官网下载安装，注意版本要求： Node的版本必须高于8.3，Python的版本必须为2.x（不支持3.x），JDK的版本必须是1.8（目前不支持1.9及更高版本） 安装完Node后需要配置npm镜像以加速后面的过程（千万不要使用cnpm，会导致模块安装路径错乱）： npm config set registry https://registry.npm.taobao.org --global npm config set disturl https://npm.taobao.org/dist --global Yarn、React Native 的命令行工具（react-native-cli）Yarn是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。 npm install -g yarn react-native-cli 安装完 yarn 后同理也要设置镜像源： yarn config set registry https://registry.npm.taobao.org --global yarn config set disturl https://npm.taobao.org/dist --global 安装完yarn之后就可以用yarn代替npm了，例如用yarn代替npm install命令，用yarn add某第三方库名代替npm install某第三方库名。 注：在同一个项目中不要混用npm install和yarn add，可能会引起意外错误。 Android 开发环境安装Android Studio自行搜索下载，安装界面中Custom选项中确保选中以下： Android SDKAndroid SDK PlatformPerformance (Intel ® HAXM)Android Virtual Device 安装Android SDKAndroid Studio默认会安装最新版本的Android SDK。目前编译React Native应用需要的是Android 9 (Pie)版本的SDK（注意SDK版本不等于终端系统版本，RN目前支持android4.1以上设备）。 在SDK Manager中选择”SDK Platforms”选项卡，然后在右下角勾选”Show Package Details”。展开Android 9 (Pie)选项，确保勾选了下面这些组件： Android SDK Platform 28Intel x86 Atom_64 System Image 然后点击”SDK Tools”选项卡，同样勾中右下角的”Show Package Details”。展开”Android SDK Build-Tools”选项，确保选中了React Native所必须的28.0.3版本。你可以同时安装多个其他版本。（可以先不装其他版本，但后续可能有些第三方模块在编译过程中会有需求，可以后续需要再装）。 配置Android环境变量_ANDROID_HOME_ 指向Android SDK 所在的目录，可以在Android Studio的”Preferences”菜单中查看SDK的真实路径，具体是Appearance &amp; Behavior→System Settings→Android SDK。 把platform-tools目录添加到环境变量Path中其默认路径为：c:\\Users\\你的用户名\\AppData\\Local\\Android\\Sdk\\platform-tools 新建一个项目测试使用React Native命令行工具来创建一个名为”AwesomeProject”的新项目： react-native init AwesomeProject 创建一个虚拟设备。点击”Create Virtual Device…”，然后选择所需的设备类型并点击”Next”，然后选择Pie API Level 28 image。点击虚拟设备旁的绿色三角按钮来启动它了，启动完后尝试运行应用。 或者连接真机进行测试。 确保先运行了模拟器或者连接了真机，使用如下命令查看： adb devices 然后在你的项目目录中运行: cd AwesomeProject react-native run-android 第一次运行时需要下载大量编译依赖，耗时可能数十分钟。","tags":[{"name":"React Native","slug":"React-Native","permalink":"https://ahbbcc.github.io/tags/React-Native/"}]},{"title":"Hello World","date":"2019-04-03T13:38:39.582Z","path":"2019/04/03/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]